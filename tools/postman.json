{
	"info": {
		"_postman_id": "92cf0afd-b390-44b5-a2f5-a41f22a9dfb6",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10138486"
	},
	"item": [
		{
			"name": "Smoke test",
			"item": [
				{
					"name": "get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET method smoke test\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST method smoke test\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/post",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT method smoke test\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/put",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"put"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH method smoke test\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{base_url}}/patch",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"patch"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE method smoke test\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/delete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET test",
			"item": [
				{
					"name": "GET endpoint with incorrect method",
					"item": [
						{
							"name": "GET endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/get",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/get",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/get",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/get",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET with parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.args.foo).to.eql(\"bar\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get?foo=bar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo",
									"value": "bar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET with empty parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.args.foo).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/get?foo=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST test",
			"item": [
				{
					"name": "POST endpoint with incorrect method",
					"item": [
						{
							"name": "POST endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/post",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/post",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/post",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST endpoint with incorrect method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"POST endpoint with incorrect method\", function() {",
											"    pm.response.to.have.status(405);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/post",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"post"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST with text body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST with text body\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data).to.eql(\"foo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "foo"
						},
						"url": {
							"raw": "{{base_url}}/post",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST with JSON body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST with JSON body\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    const dataJson = JSON.parse(responseJson.data)",
									"    pm.expect(dataJson.foo).to.eql(\"bar\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"foo\": \"bar\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/post",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST with multipart form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST with multipart form data\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.form.foo).to.eql(\"bar\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "foo",
									"value": "bar",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/post",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AUTH test",
			"item": [
				{
					"name": "AUTH bearer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.authenticated).to.eql(true);",
									"    pm.expect(responseJson.token).to.eql(\"foo\");",
									"    pm.environment.set(\"token\", responseJson.token);",
									"    pm.collectionVariables.set(\"token\", responseJson.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "foo",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bearer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bearer"
							]
						}
					},
					"response": []
				},
				{
					"name": "AUTH bearer unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/bearer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"bearer"
							]
						}
					},
					"response": []
				},
				{
					"name": "AUTH basic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.authenticated).to.eql(true);",
									"    pm.expect(responseJson.user).to.eql(\"user\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "password",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/basic-auth/user/password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"basic-auth",
								"user",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "AUTH basic unauthorised",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET with parameter\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/basic-auth/user/password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"basic-auth",
								"user",
								"password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Debug",
			"item": [
				{
					"name": "Debug",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"orderId\": \"order-1\",\n        \"orderItems\": [\n            {\n                \"name\": \"Item 1\",\n                \"price\": 100,\n                \"quantity\": 10\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 200,\n                \"quantity\": 5\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 300,\n                \"quantity\": 20\n            }\n        ]\n    },\n    {\n        \"orderId\": \"order-2\",\n        \"orderItems\": [\n            {\n                \"name\": \"Item 1\",\n                \"price\": 100,\n                \"quantity\": 5\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 200,\n                \"quantity\": 10\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 300,\n                \"quantity\": 15\n            }\n        ]\n    },\n    {\n        \"orderId\": \"order-3\",\n        \"orderItems\": [\n            {\n                \"name\": \"Item 1\",\n                \"price\": 100,\n                \"quantity\": 1\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 200,\n                \"quantity\": 2\n            },\n            {\n                \"name\": \"Item 2\",\n                \"price\": 300,\n                \"quantity\": 3\n            }\n        ]\n    }\n]    \n",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/anything",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"anything"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}